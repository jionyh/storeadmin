generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id            Int             @id @default(autoincrement())
  name          String
  slug          String          @unique
  active        Boolean
  email         String          @unique
  User          User[]
  Cost          Cost[]
  paymentMethod paymentMethod[]
  sale          sale[]
  Category      Category[]
  Unit          Unit[]
  Product       Product[]
  Purchase      Purchase[]
  CostRecurrent CostRecurrent[]

  @@map("tenants")
}

model User {
  id           Int    @id @default(autoincrement())
  name         String
  email        String @unique
  passwordHash String
  role         Role   @default(User)
  tenant_id    Int
  tenant       Tenant @relation(fields: [tenant_id], references: [id])

  @@map("users")
}

enum Role {
  User
  Admin
}

model Cost {
  id        Int      @id @default(autoincrement())
  name      String
  value     Float
  createAt  DateTime @default(now())
  tenant_id Int
  tenant    Tenant   @relation(fields: [tenant_id], references: [id])

  @@map("costs")
}

model CostRecurrent {
  id        Int      @id @default(autoincrement())
  name      String
  value     Float
  createAt  DateTime
  recurrent Boolean
  tenant_id Int
  tenant    Tenant   @relation(fields: [tenant_id], references: [id])

  @@map("costsRecurrents")
}

// Purchases Models

model Category {
  id         Int       @id @default(autoincrement())
  name       String
  tenant_id  Int
  is_deleted Boolean   @default(false)
  tenant     Tenant    @relation(fields: [tenant_id], references: [id])
  Product    Product[]

  @@map("categories")
}

model Unit {
  id           Int        @id @default(autoincrement())
  name         String
  abbreviation String     @db.VarChar(3)
  tenant_id    Int
  is_deleted   Boolean    @default(false)
  tenant       Tenant     @relation(fields: [tenant_id], references: [id])
  Purchase     Purchase[]

  @@map("units")
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String
  category_id Int
  tenant_id   Int
  is_deleted  Boolean    @default(false)
  Purchase    Purchase[]
  tenant      Tenant     @relation(fields: [tenant_id], references: [id])
  cat         Category   @relation(fields: [category_id], references: [id])

  @@map("products")
}

model Purchase {
  id         Int      @id @default(autoincrement())
  quantity   Float
  value      Float
  createAt   DateTime @default(now())
  product_id Int
  unit_id    Int
  tenant_id  Int
  supplier   String
  payment    Payments
  tenant     Tenant   @relation(fields: [tenant_id], references: [id])
  product    Product  @relation(fields: [product_id], references: [id])
  unit       Unit     @relation(fields: [unit_id], references: [id])

  @@map("purchases")
}

enum Payments {
  dinheiro
  cartao
  outros
}

// End Purchase Models

// Sales models

model paymentMethod {
  id         Int     @id @default(autoincrement())
  name       String
  tenant_id  Int
  is_deleted Boolean @default(false)
  tenant     Tenant  @relation(fields: [tenant_id], references: [id])
  sales      sale[]

  @@map("paymentsMethods")
}

model sale {
  id            Int           @id @default(autoincrement())
  value         Float
  createAt      DateTime      @default(now())
  payment_id    Int
  tenant_id     Int
  tenant        Tenant        @relation(fields: [tenant_id], references: [id])
  paymentMethod paymentMethod @relation(fields: [payment_id], references: [id])

  @@map("sales")
}

//End  Sales models
